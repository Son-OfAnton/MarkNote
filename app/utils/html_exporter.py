"""
HTML export functionality for MarkNote.

This module provides utilities to export Markdown notes to HTML format.
"""
import os
import logging
from typing import Dict, Any, Optional, List
import tempfile
import markdown
from jinja2 import Template

# Set up logging
logger = logging.getLogger(__name__)

# Default CSS for styling the exported HTML
DEFAULT_CSS = """
body {
    font-family: 'Arial', sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
    max-width: 900px;
    margin: 0 auto;
    color: #333;
    background-color: #f9f9f9;
}
.container {
    background-color: #fff;
    padding: 30px;
    border-radius: 5px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}
h1, h2, h3, h4, h5, h6 {
    color: #2c3e50;
    margin-top: 1.5em;
    margin-bottom: 0.5em;
}
h1 {
    font-size: 2em;
    border-bottom: 1px solid #eee;
    padding-bottom: 0.3em;
}
h2 {
    font-size: 1.75em;
}
h3 {
    font-size: 1.5em;
}
h4 {
    font-size: 1.25em;
}
p {
    margin: 1em 0;
}
a {
    color: #3498db;
    text-decoration: none;
}
a:hover {
    text-decoration: underline;
}
code {
    background-color: #f8f8f8;
    border-radius: 3px;
    padding: 0.2em 0.4em;
    font-family: 'Courier New', monospace;
}
pre {
    background-color: #f8f8f8;
    border-radius: 3px;
    padding: 1em;
    overflow: auto;
}
blockquote {
    border-left: 4px solid #ddd;
    padding-left: 1em;
    color: #777;
    margin-left: 0;
}
img {
    max-width: 100%;
    height: auto;
}
table {
    border-collapse: collapse;
    width: 100%;
    margin: 1em 0;
}
th, td {
    border: 1px solid #ddd;
    padding: 0.5em;
    text-align: left;
}
th {
    background-color: #f8f8f8;
}
ul, ol {
    padding-left: 2em;
}
li {
    margin: 0.5em 0;
}
/* Metadata section styling */
.metadata {
    background-color: #f8f8f8;
    padding: 1em;
    margin-bottom: 2em;
    border-radius: 5px;
    font-size: 0.9em;
}
.metadata-item {
    margin: 0.5em 0;
}
.metadata-label {
    font-weight: bold;
    margin-right: 0.5em;
}
.tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em;
}
.tag {
    background-color: #e0e0e0;
    padding: 0.2em 0.5em;
    border-radius: 3px;
    font-size: 0.8em;
}
.footer {
    margin-top: 2em;
    font-size: 0.8em;
    color: #777;
    text-align: center;
}
"""

# HTML template for the export
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <style>
        {{ css }}
    </style>
</head>
<body>
    <div class="container">
        <h1>{{ title }}</h1>
        
        {% if include_metadata %}
        <div class="metadata">
            {% if created_at %}
            <div class="metadata-item">
                <span class="metadata-label">Created:</span> {{ created_at }}
            </div>
            {% endif %}
            {% if updated_at %}
            <div class="metadata-item">
                <span class="metadata-label">Updated:</span> {{ updated_at }}
            </div>
            {% endif %}
            {% if category %}
            <div class="metadata-item">
                <span class="metadata-label">Category:</span> {{ category }}
            </div>
            {% endif %}
            {% if tags and tags|length > 0 %}
            <div class="metadata-item">
                <span class="metadata-label">Tags:</span>
                <div class="tags">
                    {% for tag in tags %}
                    <span class="tag">{{ tag }}</span>
                    {% endfor %}
                </div>
            </div>
            {% endif %}
        </div>
        {% endif %}
        
        <div class="content">
            {{ content|safe }}
        </div>
        
        <div class="footer">
            Generated by MarkNote
        </div>
    </div>
</body>
</html>
"""

# HTML index template for multiple notes
INDEX_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MarkNote - Index of Notes</title>
    <style>
        {{ css }}
        .note-list {
            list-style-type: none;
            padding: 0;
        }
        .note-item {
            margin-bottom: 1em;
            padding: 1em;
            background-color: #f8f8f8;
            border-radius: 5px;
        }
        .note-title {
            font-size: 1.2em;
            font-weight: bold;
            margin-bottom: 0.5em;
        }
        .note-meta {
            font-size: 0.9em;
            color: #666;
            margin-bottom: 0.5em;
        }
        .note-link {
            display: inline-block;
            margin-top: 0.5em;
            padding: 0.3em 0.6em;
            background-color: #3498db;
            color: white;
            border-radius: 3px;
            text-decoration: none;
        }
        .note-link:hover {
            background-color: #2980b9;
            text-decoration: none;
        }
        .category-section {
            margin: 2em 0;
        }
        .category-title {
            font-size: 1.5em;
            margin: 1em 0;
            padding-bottom: 0.3em;
            border-bottom: 1px solid #ddd;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>MarkNote - Index of Notes</h1>
        
        {% if notes %}
            {% if notes_by_category %}
                {% for category, category_notes in notes_by_category.items() %}
                    <div class="category-section">
                        <h2 class="category-title">{{ category if category else "Uncategorized" }}</h2>
                        <ul class="note-list">
                        {% for note in category_notes %}
                            <li class="note-item">
                                <div class="note-title">{{ note.title }}</div>
                                {% if note.tags and note.tags|length > 0 %}
                                <div class="note-meta">Tags: 
                                    <div class="tags">
                                        {% for tag in note.tags %}
                                        <span class="tag">{{ tag }}</span>
                                        {% endfor %}
                                    </div>
                                </div>
                                {% endif %}
                                {% if note.created_at %}
                                <div class="note-meta">Created: {{ note.created_at }}</div>
                                {% endif %}
                                <a href="{{ note.filename }}" class="note-link">View Note</a>
                            </li>
                        {% endfor %}
                        </ul>
                    </div>
                {% endfor %}
            {% else %}
                <ul class="note-list">
                {% for note in notes %}
                    <li class="note-item">
                        <div class="note-title">{{ note.title }}</div>
                        {% if note.category %}
                        <div class="note-meta">Category: {{ note.category }}</div>
                        {% endif %}
                        {% if note.tags and note.tags|length > 0 %}
                        <div class="note-meta">Tags: 
                            <div class="tags">
                                {% for tag in note.tags %}
                                <span class="tag">{{ tag }}</span>
                                {% endfor %}
                            </div>
                        </div>
                        {% endif %}
                        {% if note.created_at %}
                        <div class="note-meta">Created: {{ note.created_at }}</div>
                        {% endif %}
                        <a href="{{ note.filename }}" class="note-link">View Note</a>
                    </li>
                {% endfor %}
                </ul>
            {% endif %}
        {% else %}
            <p>No notes found.</p>
        {% endif %}
        
        <div class="footer">
            Generated by MarkNote
        </div>
    </div>
</body>
</html>
"""


def export_note_to_html(
    note_content: str,
    title: str,
    output_path: str,
    metadata: Optional[Dict[str, Any]] = None,
    custom_css: Optional[str] = None,
    include_metadata: bool = True
) -> bool:
    """
    Export a note to HTML format.

    Args:
        note_content: The Markdown content of the note
        title: The title of the note
        output_path: Path where the HTML should be saved
        metadata: Optional dictionary of note metadata
        custom_css: Optional custom CSS for styling
        include_metadata: Whether to include metadata in the HTML

    Returns:
        True if export was successful, False otherwise
    """
    try:
        # Convert the Markdown content to HTML
        html_content = markdown.markdown(
            note_content,
            extensions=[
                'markdown.extensions.tables',
                'markdown.extensions.fenced_code',
                'markdown.extensions.codehilite',
                'markdown.extensions.nl2br',
                'markdown.extensions.toc'
            ]
        )
        
        # Parse metadata if provided
        if metadata is None:
            metadata = {}
        
        # Ensure output directory exists
        output_dir = os.path.dirname(output_path)
        if output_dir and not os.path.exists(output_dir):
            os.makedirs(output_dir, exist_ok=True)
        
        # Prepare the template context
        context = {
            'title': title,
            'content': html_content,
            'css': custom_css or DEFAULT_CSS,
            'include_metadata': include_metadata,
            **metadata
        }
        
        # Render the HTML template
        template = Template(HTML_TEMPLATE)
        html_string = template.render(**context)
        
        # Write the HTML file
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_string)
            
        logger.info(f"HTML exported successfully to {output_path}")
        return True
        
    except Exception as e:
        logger.error(f"Error exporting note to HTML: {str(e)}")
        return False


def convert_markdown_to_html(
    markdown_path: str, 
    output_path: str,
    title: Optional[str] = None,
    custom_css: Optional[str] = None,
    include_metadata: bool = True
) -> bool:
    """
    Convert an existing Markdown file to HTML.

    Args:
        markdown_path: Path to the Markdown file
        output_path: Path where the HTML should be saved
        title: Optional title (defaults to filename if not provided)
        custom_css: Optional custom CSS for styling
        include_metadata: Whether to include metadata in the HTML

    Returns:
        True if conversion was successful, False otherwise
    """
    try:
        # Read the Markdown file
        with open(markdown_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Parse frontmatter if present
        from app.utils.file_handler import parse_frontmatter
        metadata, markdown_content = parse_frontmatter(content)
        
        # Use provided title or extract from metadata or filename
        note_title = title
        if not note_title:
            note_title = metadata.get('title')
            if not note_title:
                # Use the filename without extension as title
                note_title = os.path.splitext(os.path.basename(markdown_path))[0]
        
        # Export to HTML
        return export_note_to_html(
            note_content=markdown_content,
            title=note_title,
            output_path=output_path,
            metadata=metadata,
            custom_css=custom_css,
            include_metadata=include_metadata
        )
    
    except Exception as e:
        logger.error(f"Error converting Markdown to HTML: {str(e)}")
        return False


def create_html_index(
    notes_info: List[Dict[str, Any]],
    output_path: str,
    group_by_category: bool = True,
    custom_css: Optional[str] = None
) -> bool:
    """
    Create an HTML index page for multiple notes.

    Args:
        notes_info: List of dictionaries containing note information
        output_path: Path where the HTML index should be saved
        group_by_category: Whether to group notes by category
        custom_css: Optional custom CSS for styling

    Returns:
        True if creation was successful, False otherwise
    """
    try:
        # Ensure output directory exists
        output_dir = os.path.dirname(output_path)
        if output_dir and not os.path.exists(output_dir):
            os.makedirs(output_dir, exist_ok=True)
            
        # Group notes by category if requested
        notes_by_category = None
        if group_by_category:
            notes_by_category = {}
            for note in notes_info:
                category = note.get('category', '')
                if category not in notes_by_category:
                    notes_by_category[category] = []
                notes_by_category[category].append(note)
                
        # Prepare the template context
        context = {
            'notes': notes_info,
            'notes_by_category': notes_by_category,
            'css': custom_css or DEFAULT_CSS,
        }
        
        # Render the HTML template
        template = Template(INDEX_TEMPLATE)
        html_string = template.render(**context)
        
        # Write the HTML file
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_string)
            
        logger.info(f"HTML index exported successfully to {output_path}")
        return True
        
    except Exception as e:
        logger.error(f"Error creating HTML index: {str(e)}")
        return False